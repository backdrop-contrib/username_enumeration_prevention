<?php

/**
 * @file
 * Main file for the Username Enumeration Prevention.
 *
 * Adds the required functionality for removing the reset password error
 * message. Also, if views is installed restricts the callback function to work
 * only for users with the access user profiles permission.
 */

/**
 * Implements hook_requirements().
 */
function username_enumeration_prevention_requirements() {
  $requirements = array();
  $username_enumeration_prevention_roles = user_roles(FALSE, 'access user profiles');
  if (isset($username_enumeration_prevention_roles[1]) && $username_enumeration_prevention_roles[1] == "anonymous user") {
    $value = t('WARNING! Anonymous users have permission to access user profiles.');
    $severity = REQUIREMENT_WARNING;
  }
  else {
    $value = t('Anonymous users do not have permission to access user profiles.');
  }

  $requirements['username_enumeration_prevention_via_permissions'] = array(
    'title' => t('Username enumeration prevention'),
    'value' => $value,
    'description' => t('Granting anonymous users permission to access user profiles poses a security risk because it
    allows users who are not logged into the site to obtain usernames via callbacks. More information is available in the
    module README or on the !url.', array('!url' => l(t('project page'), 'http://drupal.org/project/username_enumeration_prevention'))),
    'severity' => $severity,
  );

  return $requirements;
}

/**
 * Implements hook_menu_alter().
 *
 * Disable the callback for the views module when users don't have access user
 * profiles permission.
 */
function username_enumeration_prevention_menu_alter(&$items) {
  $items['admin/views/ajax/autocomplete/user']['access arguments'] = array('access user profiles');
}

/**
 * Implements hook_form_alter().
 *
 * Checks for the user password reset form and changes the validate and submit
 * functions. Uses the overrided functions defined in this module instead of
 * Drupal cores.
 */
function username_enumeration_prevention_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if form is the reset password form.
  if (strlen(strstr($form_id, 'user_pass')) > 0) {
    // Override core validate and submit actions.
    $form['#validate'][0] = 'username_enumeration_prevention_pass_validate';
    $form['#submit'][0] = 'username_enumeration_prevention_pass_submit';
  }
}

/**
 * Overrides user_pass_validate() found in user.pages.inc.
 */
function username_enumeration_prevention_pass_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }

  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    // Reuse the 'send email' message if a value was entered in form.
    if ($name != '') {
      drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
    }
  }
}

/**
 * Overrides the user_pass_submit() found in user.pages.inc.
 */
function username_enumeration_prevention_pass_submit($form, &$form_state) {
  if (isset($form_state['values']['account'])) {
    global $language;
    $account = $form_state['values']['account'];

    // Mail one time login URL and instructions using current language.
    _user_mail_notify('password_reset', $account, $language);
    watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
    drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
  }
  $form_state['redirect'] = 'user';
}
